{"version":3,"file":"bundle.js","mappings":";;;;;;;AAmIA,IAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAoB,CAAC;AAC/D,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC","sources":["webpack://ts-app-start/./src/index.ts"],"sourcesContent":["// type annotations\n/* const nome = 'João';\nconsole.log(nome);\n\nconst arr: Array<number> = [1, 2, 3];\nconsole.log(arr[0]);\n\nconst person: { name: string; age: number; adulto?: boolean } = {\n  name: 'João',\n  age: 36,\n};\nconsole.log(person); */\n\n/* function noReturn(...args: string[]): void {\n  console.log(args.join(' '));\n}\nnoReturn('João', 'Teodoro');\n\nconst objectAbs: {\n  readonly obj: string;\n  [key: string]: unknown;\n} = {\n  obj: 'João Teodoro', // não pode ser alterada\n  chaveA: 'teste',\n};\nobjectAbs.obj = 'wrerwer';\nobjectAbs.chaveA = 'teste';\nconsole.log(objectAbs); */\n\n// Array<T> / T[]\n/* function multiplic(...args: Array<number>): number {\n  return args.reduce((ac, value) => ac * value, 1);\n}\nfunction concatStr(...args: string[]): string {\n  return args.join(' ');\n}\nfunction upper(...args: string[]): string[] {\n  return args.map((value) => value.toUpperCase());\n}\nconsole.log(multiplic(1, 2, 3));\nconsole.log(concatStr('Teodoro', 'Neto'));\nconsole.log(upper('a', 'b', 'c'));\n */\n\n// Tuple\n/* const tupleA: readonly [number, string] = [1, 'Joao']; // imutavel\nconsole.log(tupleA[1]);\nconst tupleB: [number, ...string[]] = [1]; // mutavel\nconsole.log(tupleB[0]);\nconst arr1: readonly string[] = ['João', 'Teodoro'];\nconsole.log(arr1[1]);\nconst arr2: ReadonlyArray<string> = ['João', 'Neto'];\nconsole.log(arr2[1]);\n */\n/* function createPerson(\n  firstName: string,\n  lastName?: string,\n): {\n  firstName: string;\n  lastName?: string;\n} {\n  return {\n    firstName,\n    lastName,\n  };\n}\nconst personA = createPerson('João'); // {firstName: 'João', lastName: undefined}\nconsole.log(personA); */\n/* enum Cores {\n  VERMELHO = 'Vermelho',\n  VERDE = 'Verde',\n  AZUL = 'Azul',\n  AMARELO = 201,\n  ROXO,\n}\nconsole.log(Cores[202]); */\n/*\nlet x: unknown;\nx = '10';\nx = 10;\n// diferente no any, o unknown só permite\n// operações após uma checagem\nif (typeof x === 'number') console.log(x + x);\n */\n/* const person = {\n  name: 'João' as const,\n  age: 36,\n};\n */\n/* function chooseColor(color: 'Red' | 'Green' | 'Blue'): string {\n  return color;\n}\nconsole.log(chooseColor('Red')); */\n/* type Person = {\n  name: string;\n  age: number;\n  color?: string;\n};\ntype rgb = 'red' | 'green' | 'blue';\ntype cmyk = 'cian' | 'magent' | 'yellow' | 'black';\ntype colors = rgb | cmyk;\nconst person1: Person = {\n  name: 'João',\n  age: 20,\n};\nfunction createPerson(person: Person, color: colors): Person {\n  return { ...person, color };\n}\nconsole.log(createPerson(person1, 'black')); */\n/* type MapStr = (item: string) => string;\nfunction callFn(items: string[], callback: MapStr): string[] {\n  const arr: string[] = [];\n  for (let i = 0; i < items.length; i++) {\n    arr.push(callback(items[i]));\n  }\n  return arr;\n}\nconsole.log(callFn(['a', 'b', 'c'], (item) => item.toUpperCase())); */\n/* type VerifyUser = (user: User, sentValue: User) => boolean;\ntype User = { username: string; password: string };\n\nconst verifyUser: VerifyUser = (user, sentValue) => {\n  return (\n    user.username === sentValue.username && user.password === sentValue.password\n  );\n};\nconst user = { username: 'joao', password: '123' };\nconst userBD = { username: 'joao', password: '123s' };\nconsole.log(verifyUser(user, userBD)); */\n\n// type assertion\nconst body = document.querySelector('body') as HTMLBodyElement;\nbody.style.background = 'red';\n"],"names":[],"sourceRoot":""}